apply plugin: 'com.android.application'

//
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    //
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    //
    defaultConfig {
        multiDexEnabled true
        applicationId "com.example.base"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //X5兼容64位手机
        //ndk过滤： http://blog.csdn.net/sinat_30949835/article/details/60961092
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86"
        }
    }
    //
    signingConfigs {
        config {
            keyAlias properties.getProperty("keyAlias")
            keyPassword properties.getProperty("keyPassword")
            storeFile file('store.jks')
            storePassword properties.getProperty("storePassword")
        }
    }
    //
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    //
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/rxjava.properties'
    }
    //注意：这里之所以将这以下的代码注释掉，是因为我们已经到src/main/jniLibs里面导入了so文件，如果是在libs里面导入的so文件的话，则用以下代码
    //android studio默认so文件加载目录为:src/main/jniLibs
    //如在module的build.gradle按照如下方式,自定义了so文件加载目录请确保对应目录下只有armeabi目录
    //    sourceSets {
    //        main{
    //            jniLibs.srcDirs = ['libs']
    //        }
    //    }

    //强制让所有模块都用相同的支持库版本
//    configurations.all {
//        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
//            def requested = details.requested
//            if (requested.group == 'com.android.support') {
//                if (!requested.name.startsWith("multidex")) {
//                    details.useVersion '26.1.0'
//                }
//            }
//        }
//    }
}

dependencies {
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    //Butterknife
    compile 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    //dagger
    compile 'com.google.dagger:dagger:2.14'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.14'
    //
    compile project(':sdklib')
    compile project(':emotionlib')
    compile project(':tbslib')
    compile project(':gsyvideolib')


}


