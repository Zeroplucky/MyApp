package com.example.okgo_http.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.okgo_http.db.entity.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property NUMBER = new Property(1, String.class, "NUMBER", false, "NUMBER");
        public final static Property RIGHTS = new Property(2, String.class, "RIGHTS", false, "RIGHTS");
        public final static Property TX = new Property(3, String.class, "TX", false, "TX");
        public final static Property SFZ = new Property(4, String.class, "SFZ", false, "SFZ");
        public final static Property IP = new Property(5, String.class, "IP", false, "IP");
        public final static Property PHONE = new Property(6, String.class, "PHONE", false, "PHONE");
        public final static Property SFZTP1 = new Property(7, String.class, "SFZTP1", false, "SFZTP1");
        public final static Property USER_ID = new Property(8, String.class, "USER_ID", false, "USER__ID");
        public final static Property SFZTP2 = new Property(9, String.class, "SFZTP2", false, "SFZTP2");
        public final static Property LAST_LOGIN = new Property(10, String.class, "LAST_LOGIN", false, "LAST__LOGIN");
        public final static Property EMAIL = new Property(11, String.class, "EMAIL", false, "EMAIL");
        public final static Property NAME = new Property(12, String.class, "NAME", false, "NAME");
        public final static Property STATUS = new Property(13, String.class, "STATUS", false, "STATUS");
        public final static Property PASSWORD = new Property(14, String.class, "PASSWORD", false, "PASSWORD");
        public final static Property XM = new Property(15, String.class, "XM", false, "XM");
        public final static Property SFZTP3 = new Property(16, String.class, "SFZTP3", false, "SFZTP3");
        public final static Property BZ = new Property(17, String.class, "BZ", false, "BZ");
        public final static Property USERNAME = new Property(18, String.class, "USERNAME", false, "USERNAME");
        public final static Property ROLE_ID = new Property(19, String.class, "ROLE_ID", false, "ROLE__ID");
        public final static Property SKIN = new Property(20, String.class, "SKIN", false, "SKIN");
        public final static Property JF = new Property(21, String.class, "JF", false, "JF");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NUMBER\" TEXT," + // 1: NUMBER
                "\"RIGHTS\" TEXT," + // 2: RIGHTS
                "\"TX\" TEXT," + // 3: TX
                "\"SFZ\" TEXT," + // 4: SFZ
                "\"IP\" TEXT," + // 5: IP
                "\"PHONE\" TEXT," + // 6: PHONE
                "\"SFZTP1\" TEXT," + // 7: SFZTP1
                "\"USER__ID\" TEXT," + // 8: USER_ID
                "\"SFZTP2\" TEXT," + // 9: SFZTP2
                "\"LAST__LOGIN\" TEXT," + // 10: LAST_LOGIN
                "\"EMAIL\" TEXT," + // 11: EMAIL
                "\"NAME\" TEXT," + // 12: NAME
                "\"STATUS\" TEXT," + // 13: STATUS
                "\"PASSWORD\" TEXT," + // 14: PASSWORD
                "\"XM\" TEXT," + // 15: XM
                "\"SFZTP3\" TEXT," + // 16: SFZTP3
                "\"BZ\" TEXT," + // 17: BZ
                "\"USERNAME\" TEXT," + // 18: USERNAME
                "\"ROLE__ID\" TEXT," + // 19: ROLE_ID
                "\"SKIN\" TEXT," + // 20: SKIN
                "\"JF\" TEXT);"); // 21: JF
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NUMBER = entity.getNUMBER();
        if (NUMBER != null) {
            stmt.bindString(2, NUMBER);
        }
 
        String RIGHTS = entity.getRIGHTS();
        if (RIGHTS != null) {
            stmt.bindString(3, RIGHTS);
        }
 
        String TX = entity.getTX();
        if (TX != null) {
            stmt.bindString(4, TX);
        }
 
        String SFZ = entity.getSFZ();
        if (SFZ != null) {
            stmt.bindString(5, SFZ);
        }
 
        String IP = entity.getIP();
        if (IP != null) {
            stmt.bindString(6, IP);
        }
 
        String PHONE = entity.getPHONE();
        if (PHONE != null) {
            stmt.bindString(7, PHONE);
        }
 
        String SFZTP1 = entity.getSFZTP1();
        if (SFZTP1 != null) {
            stmt.bindString(8, SFZTP1);
        }
 
        String USER_ID = entity.getUSER_ID();
        if (USER_ID != null) {
            stmt.bindString(9, USER_ID);
        }
 
        String SFZTP2 = entity.getSFZTP2();
        if (SFZTP2 != null) {
            stmt.bindString(10, SFZTP2);
        }
 
        String LAST_LOGIN = entity.getLAST_LOGIN();
        if (LAST_LOGIN != null) {
            stmt.bindString(11, LAST_LOGIN);
        }
 
        String EMAIL = entity.getEMAIL();
        if (EMAIL != null) {
            stmt.bindString(12, EMAIL);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(13, NAME);
        }
 
        String STATUS = entity.getSTATUS();
        if (STATUS != null) {
            stmt.bindString(14, STATUS);
        }
 
        String PASSWORD = entity.getPASSWORD();
        if (PASSWORD != null) {
            stmt.bindString(15, PASSWORD);
        }
 
        String XM = entity.getXM();
        if (XM != null) {
            stmt.bindString(16, XM);
        }
 
        String SFZTP3 = entity.getSFZTP3();
        if (SFZTP3 != null) {
            stmt.bindString(17, SFZTP3);
        }
 
        String BZ = entity.getBZ();
        if (BZ != null) {
            stmt.bindString(18, BZ);
        }
 
        String USERNAME = entity.getUSERNAME();
        if (USERNAME != null) {
            stmt.bindString(19, USERNAME);
        }
 
        String ROLE_ID = entity.getROLE_ID();
        if (ROLE_ID != null) {
            stmt.bindString(20, ROLE_ID);
        }
 
        String SKIN = entity.getSKIN();
        if (SKIN != null) {
            stmt.bindString(21, SKIN);
        }
 
        String JF = entity.getJF();
        if (JF != null) {
            stmt.bindString(22, JF);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NUMBER = entity.getNUMBER();
        if (NUMBER != null) {
            stmt.bindString(2, NUMBER);
        }
 
        String RIGHTS = entity.getRIGHTS();
        if (RIGHTS != null) {
            stmt.bindString(3, RIGHTS);
        }
 
        String TX = entity.getTX();
        if (TX != null) {
            stmt.bindString(4, TX);
        }
 
        String SFZ = entity.getSFZ();
        if (SFZ != null) {
            stmt.bindString(5, SFZ);
        }
 
        String IP = entity.getIP();
        if (IP != null) {
            stmt.bindString(6, IP);
        }
 
        String PHONE = entity.getPHONE();
        if (PHONE != null) {
            stmt.bindString(7, PHONE);
        }
 
        String SFZTP1 = entity.getSFZTP1();
        if (SFZTP1 != null) {
            stmt.bindString(8, SFZTP1);
        }
 
        String USER_ID = entity.getUSER_ID();
        if (USER_ID != null) {
            stmt.bindString(9, USER_ID);
        }
 
        String SFZTP2 = entity.getSFZTP2();
        if (SFZTP2 != null) {
            stmt.bindString(10, SFZTP2);
        }
 
        String LAST_LOGIN = entity.getLAST_LOGIN();
        if (LAST_LOGIN != null) {
            stmt.bindString(11, LAST_LOGIN);
        }
 
        String EMAIL = entity.getEMAIL();
        if (EMAIL != null) {
            stmt.bindString(12, EMAIL);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(13, NAME);
        }
 
        String STATUS = entity.getSTATUS();
        if (STATUS != null) {
            stmt.bindString(14, STATUS);
        }
 
        String PASSWORD = entity.getPASSWORD();
        if (PASSWORD != null) {
            stmt.bindString(15, PASSWORD);
        }
 
        String XM = entity.getXM();
        if (XM != null) {
            stmt.bindString(16, XM);
        }
 
        String SFZTP3 = entity.getSFZTP3();
        if (SFZTP3 != null) {
            stmt.bindString(17, SFZTP3);
        }
 
        String BZ = entity.getBZ();
        if (BZ != null) {
            stmt.bindString(18, BZ);
        }
 
        String USERNAME = entity.getUSERNAME();
        if (USERNAME != null) {
            stmt.bindString(19, USERNAME);
        }
 
        String ROLE_ID = entity.getROLE_ID();
        if (ROLE_ID != null) {
            stmt.bindString(20, ROLE_ID);
        }
 
        String SKIN = entity.getSKIN();
        if (SKIN != null) {
            stmt.bindString(21, SKIN);
        }
 
        String JF = entity.getJF();
        if (JF != null) {
            stmt.bindString(22, JF);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NUMBER
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // RIGHTS
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // TX
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SFZ
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // IP
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // PHONE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SFZTP1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // USER_ID
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // SFZTP2
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // LAST_LOGIN
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // EMAIL
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // NAME
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // STATUS
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // PASSWORD
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // XM
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // SFZTP3
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // BZ
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // USERNAME
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // ROLE_ID
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // SKIN
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // JF
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNUMBER(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRIGHTS(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTX(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSFZ(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIP(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPHONE(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSFZTP1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUSER_ID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSFZTP2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLAST_LOGIN(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEMAIL(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNAME(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSTATUS(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPASSWORD(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setXM(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSFZTP3(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBZ(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUSERNAME(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setROLE_ID(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSKIN(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setJF(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
